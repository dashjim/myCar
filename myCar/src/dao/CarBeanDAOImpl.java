package dao;

import com.ibatis.common.util.PaginatedList;
import com.ibatis.sqlmap.client.SqlMapClient;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import model.CarBean;
import model.CarBeanExample;

public class CarBeanDAOImpl implements CarBeanDAO {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table carlist
     *
     * @ibatorgenerated Wed Jul 14 20:32:59 CST 2010
     */
    private SqlMapClient sqlMapClient;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table carlist
     *
     * @ibatorgenerated Wed Jul 14 20:32:59 CST 2010
     */
    public CarBeanDAOImpl(SqlMapClient sqlMapClient) {
        super();
        this.sqlMapClient = sqlMapClient;
    }

    /**
     * It can execute any sql.
     * 
     * @throws SQLException 
     */
    public List carBeanSql(String sql) throws SQLException {
    	HashMap map = new HashMap();
    	map.put("sql", sql);
    	return (List)sqlMapClient.queryForList("carlist.carBeanSql",map);
    	
    }
    
    /**
     * @throws SQLException 
     */
	public String[] getProducerNames() throws SQLException
	{
		List<HashMap> carbean = new ArrayList<HashMap>();
		String[] producers = null;
	
		carbean = carBeanSql("SELECT distinct producer FROM mycar.carlist");
		producers = new String[carbean.size()];
		int i=0;
		for (Iterator iterator = carbean.iterator(); iterator.hasNext();i++)
		{
			HashMap carBean2 = (HashMap) iterator.next();
			producers[i]= (String)carBean2.get("producer");
		}
		
		return producers;
	}
	
	/**
	 * for all car, notice there is another method to get car names for a producer.
	 */
	public String[] getCarNames() throws SQLException
	{
		List<HashMap> carbean = new ArrayList<HashMap>();
		String[] producers = null;
	
		carbean = carBeanSql("SELECT distinct name FROM mycar.carlist");
		producers = new String[carbean.size()];
		int i=0;
		for (Iterator iterator = carbean.iterator(); iterator.hasNext();i++)
		{
			HashMap carBean2 = (HashMap) iterator.next();
			
			producers[i]= (String)carBean2.get("name");
			
		}
		
		return producers;
	}
	
	/**
	 * for a producer.
	 * @param producerName
	 * @return
	 * @throws SQLException
	 */
	public String[] getCarNames(String producerName) throws SQLException
	{
		List<HashMap> carbean = new ArrayList<HashMap>();
		String[] carNames = null;
	
		carbean = carBeanSql("SELECT distinct name FROM mycar.carlist where producer='"+producerName+"'");
		carNames = new String[carbean.size()];
		int i=0;
		for (Iterator iterator = carbean.iterator(); iterator.hasNext();i++)
		{
			HashMap carBean2 = (HashMap) iterator.next();
			
			carNames[i]= (String)carBean2.get("name");
			
		}
		
		return carNames;
	}
    
	public PaginatedList selectPaginnatedByExample(CarBeanExample example, int listSize) throws SQLException {
        PaginatedList list = sqlMapClient.queryForPaginatedList("carlist.ibatorgenerated_selectByExample", example, listSize);
        return list;
    }
    
    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table carlist
     *
     * @ibatorgenerated Wed Jul 14 20:32:59 CST 2010
     */
    public int countByExample(CarBeanExample example) throws SQLException {
        Integer count = (Integer)  sqlMapClient.queryForObject("carlist.ibatorgenerated_countByExample", example);
        return count.intValue();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table carlist
     *
     * @ibatorgenerated Wed Jul 14 20:32:59 CST 2010
     */
    public int deleteByExample(CarBeanExample example) throws SQLException {
        int rows = sqlMapClient.delete("carlist.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table carlist
     *
     * @ibatorgenerated Wed Jul 14 20:32:59 CST 2010
     */
    public int deleteByPrimaryKey(Integer id) throws SQLException {
        CarBean key = new CarBean();
        key.setId(id);
        int rows = sqlMapClient.delete("carlist.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table carlist
     *
     * @ibatorgenerated Wed Jul 14 20:32:59 CST 2010
     */
    public void insert(CarBean record) throws SQLException {
        sqlMapClient.insert("carlist.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table carlist
     *
     * @ibatorgenerated Wed Jul 14 20:32:59 CST 2010
     */
    public void insertSelective(CarBean record) throws SQLException {
        sqlMapClient.insert("carlist.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table carlist
     *
     * @ibatorgenerated Wed Jul 14 20:32:59 CST 2010
     */
    public List selectByExample(CarBeanExample example) throws SQLException {
        List list = sqlMapClient.queryForList("carlist.ibatorgenerated_selectByExample", example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table carlist
     *
     * @ibatorgenerated Wed Jul 14 20:32:59 CST 2010
     */
    public CarBean selectByPrimaryKey(Integer id) throws SQLException {
        CarBean key = new CarBean();
        key.setId(id);
        CarBean record = (CarBean) sqlMapClient.queryForObject("carlist.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table carlist
     *
     * @ibatorgenerated Wed Jul 14 20:32:59 CST 2010
     */
    public int updateByExampleSelective(CarBean record, CarBeanExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("carlist.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table carlist
     *
     * @ibatorgenerated Wed Jul 14 20:32:59 CST 2010
     */
    public int updateByExample(CarBean record, CarBeanExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("carlist.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table carlist
     *
     * @ibatorgenerated Wed Jul 14 20:32:59 CST 2010
     */
    public int updateByPrimaryKeySelective(CarBean record) throws SQLException {
        int rows = sqlMapClient.update("carlist.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table carlist
     *
     * @ibatorgenerated Wed Jul 14 20:32:59 CST 2010
     */
    public int updateByPrimaryKey(CarBean record) throws SQLException {
        int rows = sqlMapClient.update("carlist.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table carlist
     *
     * @ibatorgenerated Wed Jul 14 20:32:59 CST 2010
     */
    private static class UpdateByExampleParms extends CarBeanExample {
        private Object record;

        public UpdateByExampleParms(Object record, CarBeanExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}